name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  NAMESPACE: ${{ github.repository_owner }}

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-server:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push web client image
        uses: docker/build-push-action@v5
        with:
          context: ./web-client
          file: ./web-client/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-web-client:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-web-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create release notes
        run: |
          echo "Release ${{ steps.version.outputs.version }}" > release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: RideHive ${{ steps.version.outputs.version }}
          body: |
            ## What's Changed
            
            ### Docker Images
            - `${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-server:${{ steps.version.outputs.version }}`
            - `${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-web-client:${{ steps.version.outputs.version }}`
            
            ### Docker Compose
            - docker-compose.prod.yml
            - .env.prod.example
            
            ### Installation
            ```bash
            # Download release assets
            wget https://github.com/petrepopescu21/ridehive/releases/download/${{ steps.version.outputs.version }}/docker-compose.prod.yml
            wget https://github.com/petrepopescu21/ridehive/releases/download/${{ steps.version.outputs.version }}/.env.prod.example
            
            # Configure environment
            cp .env.prod.example .env.prod
            # Edit .env.prod with your settings
            
            # Run with Docker Compose
            docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
            ```
          files: |
            docker-compose.prod.yml
            .env.prod.example
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

  create-docker-compose-release:
    name: Create Docker Compose Release Assets
    runs-on: ubuntu-latest
    needs: build-and-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create production docker-compose
        run: |
          # Create production docker-compose.prod.yml
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_DB: ridehive
                POSTGRES_USER: ridehive
                POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
              volumes:
                - postgres_data:/var/lib/postgresql/data
              networks:
                - ridehive-network
            
            redis:
              image: redis:7-alpine
              volumes:
                - redis_data:/data
              networks:
                - ridehive-network
            
            server:
              image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-server:${{ steps.version.outputs.version }}
              environment:
                NODE_ENV: production
                PORT: 3001
                DB_HOST: postgres
                DB_PORT: 5432
                DB_NAME: ridehive
                DB_USER: ridehive
                DB_PASSWORD: \${POSTGRES_PASSWORD}
                REDIS_HOST: redis
                REDIS_PORT: 6379
                SESSION_SECRET: \${SESSION_SECRET}
                ORGANIZER_PASSWORD: \${ORGANIZER_PASSWORD}
              ports:
                - "3001:3001"
              depends_on:
                - postgres
                - redis
              networks:
                - ridehive-network
              restart: unless-stopped
            
            web-client:
              image: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/ridehive-web-client:${{ steps.version.outputs.version }}
              ports:
                - "3000:3000"
              depends_on:
                - server
              networks:
                - ridehive-network
              restart: unless-stopped
          
          volumes:
            postgres_data:
            redis_data:
          
          networks:
            ridehive-network:
          EOF

      - name: Create .env.example for production
        run: |
          cat > .env.prod.example << EOF
          # Production Environment Variables for RideHive
          
          # Database
          POSTGRES_PASSWORD=your-secure-password-here
          
          # Session
          SESSION_SECRET=your-super-secret-session-key-change-this-in-production
          
          # Authentication
          ORGANIZER_PASSWORD=your-organizer-password
          EOF

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            docker-compose.prod.yml
            .env.prod.example